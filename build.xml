<?xml version="1.0" encoding="UTF-8"?>
<!--                                                                                  -->
<!-- Copyright 2002-2023 Echo Three, LLC                                              -->
<!--                                                                                  -->
<!-- Licensed under the Apache License, Version 2.0 (the "License");                  -->
<!-- you may not use this file except in compliance with the License.                 -->
<!-- You may obtain a copy of the License at                                          -->
<!--                                                                                  -->
<!--     http://www.apache.org/licenses/LICENSE-2.0                                   -->
<!--                                                                                  -->
<!-- Unless required by applicable law or agreed to in writing, software              -->
<!-- distributed under the License is distributed on an "AS IS" BASIS,                -->
<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.         -->
<!-- See the License for the specific language governing permissions and              -->
<!-- limitations under the License.                                                   -->
<!--                                                                                  -->
<project basedir="." default="compile" name="Echo Three"
    xmlns:ivy="antlib:org.apache.ivy.ant"
    xmlns:jacoco="antlib:org.jacoco.ant">

    <!-- The component root directory of the workspace -->
    <property name="root.dir.home" value="." />
    <!-- where all application jars are stored -->
    <property name="root.dir.lib" value="${root.dir.home}/lib" />
    <property name="dir.build.metadata.common" value="${root.dir.home}/build/metadata/common" />

    <property name="build.properties.file" value="${dir.build.metadata.common}/echothree-build.properties" />
    <property name="build.properties.comment" value="Build information for ${ant.project.name}" />
    
    <property file="environment.properties" />

    <target name="prepare">
        <mkdir dir="${root.dir.home}/build" />
        <mkdir dir="${root.dir.home}/build/lib" />
        <mkdir dir="${root.dir.home}/build/metadata" />
        <mkdir dir="${root.dir.home}/build/metadata/common" />
        <mkdir dir="${wildfly.output.dir}" />
        <mkdir dir="${jacoco.output.dir}" />
        <mkdir dir="${jacoco.output.report.dir}" />
    </target>
    
    <target name="build-properties-instance" depends="prepare">
        <propertyfile file="${build.properties.file}" comment="${build.properties.comment}">
          <entry key="build.instance" type="int" default="0" operation="+" />
        </propertyfile>
    </target>
    
    <target name="build-properties" depends="build-properties-instance">
        <exec executable="git" outputproperty="git.branch">
            <arg line="rev-parse --abbrev-ref HEAD"/>
        </exec>

        <exec executable="git" outputproperty="git.tagtemp">
            <arg value="describe"/>
        </exec>

        <condition property="git.tag"
            value="none"
            else="${git.tagtemp}">
            <matches pattern="cannot" string="${git.tagtemp}"/>
        </condition>

        <exec executable="git" outputproperty="git.revision">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
        
        <propertyfile file="${build.properties.file}" comment="${build.properties.comment}">
            <entry key="git.branch" value="${git.branch}" />
            <entry key="git.tag" value="${git.tag}" />
            <entry key="git.revision" value="${git.revision}" />
            <entry key="build.time" type="date" value="now" pattern="MM/dd/yy hh:mm:ss aa Z" />
            <entry key="build.user" value="${user.name}" />
        </propertyfile>
    </target>
    
    <target name="setup-ivy-uptodate">
        <uptodate
            property="com.echothree.uptodate.ivy"
            targetfile="${user.home}/.ant/lib/ivy.jar">
            <srcfiles dir= "${root.dir.lib}/apache-ivy" includes="ivy.jar" />
        </uptodate>
    </target>

    <target name="setup-ivy-copy" unless="com.echothree.uptodate.ivy">
        <copy todir="${user.home}/.ant/lib">
            <fileset dir="${root.dir.lib}/apache-ivy">
                <include name="ivy.jar"/>
            </fileset>
        </copy>
    </target>
    
    <target name="setup-ivy" depends="setup-ivy-uptodate,setup-ivy-copy" />
    
    <target name="uptodate-ivy-lib">
        <uptodate
            property="com.echothree.uptodate.ivy-lib"
            srcfile="ivy.xml"
            targetfile="build/lib/.flagfile" />
    </target>

    <target name="retrieve-ivy-lib" unless="com.echothree.uptodate.ivy-lib" depends="prepare">
        <ivy:retrieve conf="sources" pattern="build/lib-sources/[artifact](-[classifier]).[ext]" />
        <ivy:retrieve conf="javadoc" pattern="build/lib-javadoc/[artifact](-[classifier]).[ext]" />
        <ivy:retrieve conf="binaries" pattern="build/lib/[artifact](-[classifier]).[ext]" />
        <touch file="build/lib/.flagfile" />
    </target>

    <target name="ivy-lib" depends="uptodate-ivy-lib,retrieve-ivy-lib" />

    <target name="ivy-report">
        <ivy:resolve conf="binaries" />
        <ivy:report todir="generated/ivy" />
    </target>
    
    <target name="compile" depends="build-properties,setup-ivy,ivy-lib">
        <ant dir="src" target="jars"/>
        <parallel>
            <ant dir="service" target="compile"/>
            <ant dir="test" target="compile"/>
            <ant dir="ui" target="compile"/>
        </parallel>
    </target>
    
    <target name="javadoc" depends="build-properties,setup-ivy,ivy-lib">
        <ant dir="src" target="javadoc"/>
    </target>
    
    <!-- Assumes Javadoc has already been generated and is up-to-date. -->
    <target name="publish-javadoc">
        <exec executable="rsync" dir="." failonerror="true">
            <arg value="-avx"/>
            <arg value="-e"/>
            <arg value="ssh"/>
            <arg value="--delete"/>
            <arg value="generated/javadoc/"/>
            <arg value="${web.host}:${web.dir.base}/${web.dir.javadoc}"/>
        </exec>
    </target>
    
    <target name="pmd" depends="build-properties,setup-ivy,ivy-lib">
        <ant dir="src" target="pmd"/>
    </target>

    <target name="deploy" depends="build-properties,setup-ivy,ivy-lib">
        <ant dir="src" target="deploy"/>
        <parallel>
            <ant dir="service" target="deploy"/>
            <ant dir="ui" target="deploy"/>
        </parallel>
    </target>
    
    <target name="clean">
        <ant dir="src" target="clean"/>
        <ant dir="service" target="clean"/>
        <ant dir="test" target="clean"/>
        <ant dir="ui" target="clean"/>
    </target>
    
    <target name="compile-test" depends="build-properties,setup-ivy,ivy-lib">
        <ant dir="test" target="compile"/>
    </target>
    
    <target name="test" depends="build-properties,setup-ivy,ivy-lib">
        <ant dir="test" target="test"/>
    </target>
    
    <target name="complete">
        <ant target="clean"/>
        <ant target="compile"/>
        <ant target="deploy"/>
        <parallel>
            <ant target="javadoc"/>
            <ant target="pmd"/>
            <ant target="ivy-report"/>
        </parallel>
    </target>
    
    <target name="setup" depends="build-properties,setup-ivy" />

    <target name="wildfly-start" description="Start WildFly.">
        <property name="wildfly.javaopts" value="${wildfly.javaopts.memory} ${wildfly.javaopts.network} ${wildfly.javaopts.jooq} ${wildfly.javaopts.required}"/>
        <property name="wildfly.spawn" value="false"/>
        <ant target="wildfly-start-server"/>
    </target>

    <target name="wildfly-start-debug" description="Start WildFly with remote debugging enabled.">
        <property name="wildfly.javaopts" value="${wildfly.javaopts.memory} ${wildfly.javaopts.network} ${wildfly.javaopts.jooq} ${wildfly.javaopts.required} ${wildfly.javaopts.debug}"/>
        <property name="wildfly.spawn" value="false"/>
        <ant target="wildfly-start-server"/>
    </target>

    <target name="wildfly-start-jacoco" description="Start WildFly and capture code coverage data.">
        <property name="wildfly.javaopts" value="${wildfly.javaopts.memory} ${wildfly.javaopts.network} ${wildfly.javaopts.jooq} ${wildfly.javaopts.required} ${wildfly.javaopts.jacoco}"/>
        <property name="wildfly.spawn" value="true"/>
        <ant target="wildfly-start-server"/>
    </target>

    <target name="wildfly-start-server" depends="deploy">
        <property environment="env"/>
        <exec executable="../../${wildfly.home.bin}/${wildfly.instance}.sh" spawn="${wildfly.spawn}" dir="${wildfly.output.dir}">
            <env key="JAVA_OPTS" value="${wildfly.javaopts}"/>
            <arg value="-b=${wildfly.host}"/>
            <arg value="--server-config=${wildfly.configuration}"/>
        </exec>
        <waitfor maxwait="2" maxwaitunit="minute">
            <and>
                <socket server="${wildfly.host}" port="${wildfly.console.port}" />
                <http url="http://${wildfly.host}:${wildfly.console.port}${wildfly.console.url}" />
            </and>
        </waitfor>
    </target>

    <target name="wildfly-reload" depends="prepare">
        <exec executable="${wildfly.home.bin}/jboss-cli.sh" output="${wildfly.output.reload}">
            <arg value="--connect"/>
            <arg value="command=:reload"/>
        </exec>
    </target>

    <target name="wildfly-shutdown" depends="prepare">
        <exec executable="${wildfly.home.bin}/jboss-cli.sh" output="${wildfly.output.shutdown}">
            <arg value="--connect"/>
            <arg value="command=:shutdown"/>
        </exec>
    </target>

    <target name="jacoco-report" depends="build-properties,setup-ivy,ivy-lib">
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
            <classpath>
                <fileset dir="build/lib">
                    <include name="**/org.jacoco.*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <jacoco:report>
            <executiondata>
                <file file="${jacoco.output.dir}/${jacoco.output.destfile}"/>
            </executiondata>
            <structure name="ContaAzul">
                <classfiles>
                    <dirset dir="build/classes" includes="**"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <dirset dir="generated/data/java" includes="**"/>
                    <dirset dir="generated/form/java" includes="**"/>
                    <dirset dir="src/java" includes="**"/>
                </sourcefiles>
            </structure>
            <html destdir="${jacoco.output.report.dir}"/>
        </jacoco:report>
    </target>

</project>

